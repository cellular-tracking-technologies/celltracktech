print(y)
print((y + 1800))
return(conn[conn$device_id == x & conn$serverstamp >= y & conn$serverstamp <= (y + 10800),])}, datacross$device_id,datacross$prev) #9000 sec is 2.5 hr
check3 <- unlist(Map(function(x,y) {
print(x)
print(y)
print((y + 1800))
conn <- conn[conn$device_id == x,]
return(conn$serverstamp[which(abs(conn$serverstamp - y) == min(abs(conn$serverstamp - y)))])}, datacross$device_id,datacross$timestamp))
datacross$conn <- sapply(check, nrow)
datacross$conn <- ifelse(datacross$conn > 0, 1, 0)
datacross$conn2 <- sapply(check2, nrow)
datacross$conn2 <- ifelse(datacross$conn2 > 0, 1, 0)
datacross$closest <- as.POSIXct(check3, origin="1970-01-01", tz="UTC")
datacross$timediff <- datacross$closest - datacross$timestamp
units <- datacross %>%
group_by(device_id) %>%
summarise(ave = mean(conn),
ave2 = mean(conn2))
datacross
datacross[datacross$geowhere=="cross",]
datacross[datacross$geo_where=="cross",]
datacross[datacross$geo_where=="cross",c(3,9,13:33)]
datacross[datacross$geo_where=="cross",c(3,9,13:35)]
datacross <- datacross[-which(datacross$geo=="out"),]
datacross[datacross$geo_where=="cross",c(3,9,13:35)]
mean(datacross$conn)
mean(datacross$conn2)
mean(datacross$conn2[data$geo_where=="cross"])
mean(datacross$conn2[datacross$geo_where=="cross"])
mean(datacross$conn1[datacross$geo_where=="cross"])
mean(datacross$conn[datacross$geo_where=="cross"])
datacross[datacross$where=="cross" & datacross$geo_where=="cross",]
datacross[datacross$where=="cross" & datacross$geo_where=="cross",c(3,9,13:33)]
DT_sf <- cbind(DT_sf,test)
plot(DT_sf["test"])
plot(st_geometry(nc))
plot(DT_sf[1300:1310,c("test")], add=T)
plot(DT_sf[1200:1310,c("test")], add=T)
plot(DT_sf[1000:1310,c("test")], add=T)
plot(DT_sf[900:1310,c("test")], add=T)
plot(DT_sf[500:1310,c("test")], add=T)
plot(DT_sf[1:1310,c("test")], add=T)
plot(st_geometry(nc))
plot(DT_sf[1:1310,c("test")], add=T)
plot(st_geometry(nc))
plot(DT_sf[1:2000,c("test")], add=T)
st_contains(DT_sf, nc)
test2 <- st_contains(DT_sf, nc)
tail(test2)
sapply(test2, length)
which(sapply(test2, length) > 0)
nc
plot(st_geometry(nc))
plot(DT_sf[1700:2000,c("test")], add=T)
st_contains(DT_sf[1700:2000,], nc)
st_crosses(DT_sf[1700:2000,], nc)
st_within(DT_sf[1700:2000,], nc)
st_touches(DT_sf, nc)
sapply(st_touches(DT_sf, nc),length)
test2 <- sapply(st_touches(DT_sf, nc),length)
which(test2 > 0)
test2 <- sapply(st_intersects(DT_sf, nc),length)
which(test2 > 0)
(st_intersects(DT_sf, nc)
)
test <- sapply(st_within(DT_sf, nc), max)
test2 <- sapply(st_intersects(DT_sf, nc),max)
which(test2 > test)
test2 > test
which(test != test2)
test == test2
all(test == test2)
plot(st_geometry(nc))
plot(DT_sf[1:2000,c("test")], add=T)
plot(st_geometry(nc))
plot(DT_sf[1:1000,c("test")], add=T)
test3 <- st_filter(DT_sf[1:1000,], nc)
plot(st_geometry(nc))
plot(test3[,c("test")], add=T)
plot(st_geometry(nc))
plot(DT_sf[1:1000,c("test")], add=T)
nc <- st_read("~/Documents/data/caco/CACO_GeofencesAll.kml")
multiline <- sapply(st_intersects(DT_sf, nc), max)
DT_sf <- cbind(DT_sf,multiline)
plot(st_geometry(nc))
plot(DT_sf[1:1000,c("multiline")], add=T)
head(DT_sf)
multiline
unique(multiline)
source("~/Documents/R/caco.R")
datacross
datacross[,c(3,9,13:35)]
datacross[,c(1,3,9,13:35)]
datacross[,c(1:3,9,13:35)]
datacross[,c(1:4,9,13:35)]
datacross[,c(1:5,9,13:35)]
datacross[,c(1:5,9,20:35)]
datacross[,c(1:5,9,22:35)]
datacross[,c(1:5,9,23:35)]
datacross[,c(1:5,9,24:35)]
datacross[,c(1:9,24:35)]
datacross[,c(1:10,24:35)]
datacross[,c(1:11,24:35)]
datacross[,c(1:12,24:35)]
datacross[,c(1:13,24:35)]
datacross[,c(1:14,24:35)]
datacross[,c(1:15,24:35)]
datacross[,c(1:16,24:35)]
colnames(datacross)[17:23]
datacross[,c(1:14,22:35)]
as.POSIXct("10-13-2022 13:00")
as.POSIXct("2022-10-13 13:00")
format(as.POSIXct("2022-10-13 13:00"), tz="UTC")
str(format(as.POSIXct("2022-10-13 13:00"), tz="UTC"))
tz(as.POSIXct("2022-10-13 13:00"), "UTC")
as.POSIXct(format(as.POSIXct("2022-10-13 13:00"), tz="UTC"), tz="UTC")
source("~/Documents/R/dfd.R")
#V2
#get_to_key -> files/v2/ctt or sg
grViz(diagram = "digraph flowchart {
#cron.move_new_data()
tab1 [fontname = Arial, shape = box, style = rounded, color=darkgreen, label = '@@1']
tab2 [shape=box, color=darkgreen, label='@@2']
tab3 [shape=box, color=darkgreen, label='@@3']
tab4 [shape=folder, color = red, label = '@@4']
tab5 [shape=folder, style=filled, fillcolor = Beige, label = '@@5']
tab6 [shape=folder, style=filled, fillcolor = Beige, label = '@@6']
tab7 [shape=folder, style=filled, fillcolor = Beige, label = '@@7']
tab8 [shape=folder, style=filled, fillcolor = Beige, label = '@@8']
tab9 [shape=folder, style=filled, fillcolor = Beige, label = '@@9']
tab10 [shape=circle, label = '@@10']
tab11 [shape=folder, color = darkgreen, label = '@@11']
tab12 [shape=circle, label = '@@12']
tab13 [shape=folder, color=darkgreen, label = '@@13']
tab14 [shape=folder, style=filled, fillcolor = Beige, label='@@14']
tab15 [shape=folder, color = darkgreen, label = '@@15']
tab16 [shape=folder, style=filled, fillcolor = Beige, label = '@@16']
tab17 [shape=folder, style=filled, fillcolor = Beige, label = '@@17']
tab18 [shape=circle, label = '@@18']
tab19 [shape=folder, color=darkgreen, label = '@@19']
tab20 [shape=folder, style=filled, fillcolor = Beige, label = '@@20']
tab21 [shape=folder, color=darkgreen, label = '@@21']
tab22 [shape=folder, color=darkgreen, label = '@@22']
# set up node layout
tab1 -> tab2 [label = ' V2']
tab1 -> tab3
tab3 -> tab11 [label = ' sg']
tab3 -> tab15 [label = ' V1']
tab2 -> tab4
tab4 -> tab5 [label = ' move_files()']
tab5 -> tab6
tab5 -> tab7
tab4 -> tab8 [label=' V1 files can end up here']
tab4 -> tab9 [label = ' sensor station not found']
tab6 -> tab10 [style = dashed]
tab11 -> tab12 [style = dashed]
tab12 -> tab13 [style = dashed]
tab11 -> tab14
tab15 -> tab16 [label = ' move_new_data()']
tab16 -> tab17 [label = ' sensor station not found']
tab16 -> tab18 [style = dashed]
tab18 -> tab19 [style = dashed]
tab16 -> tab19 [label = ' gps', style = dashed]
tab16 -> tab19 [label = ' node', style = dashed]
tab16 -> tab20
tab6 -> tab21 [style = dashed, label = ' gps']
tab6 -> tab21 [style = dashed, label = ' node']
tab10 -> tab21 [style = dashed]
tab7 -> tab22 [style = dashed]
}
[1]: 'Motus'
[2]: 'ctt-motus.celltracktech.com'
[3]: 'ctt-motus-development'
[4]: 'manual/name_match'
[5]: 'files/v2'
[6]: 'ctt'
[7]: 'sg'
[8]: 'unknown'
[9]: 'unknown-station'
[10]: 'data'
[11]: 'motus/data/sg'
[12]: 'pifile'
[13]: 'motus/dual-mode-ctt-filtered'
[14]: 'files/sensorgnome'
[15]: 'tag-data'
[16]: 'raw-data'
[17]: 'unknown'
[18]: 'data'
[19]: 'ctt/tag-data'
[20]: 'original-data'
[21]: 'files/v2/ctt'
[22]: 'files/v2/sg'
")
source("~/Documents/R/dfd.R")
#V2
#get_to_key -> files/v2/ctt or sg
grViz(diagram = "digraph flowchart {
#cron.move_new_data()
tab1 [fontname = Arial, shape = box, style = rounded, color=darkgreen, label = '@@1']
tab2 [shape=box, color=darkgreen, label='@@2']
tab3 [shape=box, color=darkgreen, label='@@3']
tab4 [shape=folder, color = red, label = '@@4']
tab5 [shape=folder, style=filled, fillcolor = Beige, label = '@@5']
tab6 [shape=folder, style=filled, fillcolor = Beige, label = '@@6']
tab7 [shape=folder, style=filled, fillcolor = Beige, label = '@@7']
tab8 [shape=folder, style=filled, fillcolor = Beige, label = '@@8']
tab9 [shape=folder, style=filled, fillcolor = Beige, label = '@@9']
tab10 [shape=circle, label = '@@10']
tab11 [shape=folder, color = darkgreen, label = '@@11']
tab12 [shape=circle, label = '@@12']
tab13 [shape=folder, color=darkgreen, label = '@@13']
tab14 [shape=folder, style=filled, fillcolor = Beige, label='@@14']
tab15 [shape=folder, color = darkgreen, label = '@@15']
tab16 [shape=folder, style=filled, fillcolor = Beige, label = '@@16']
tab17 [shape=folder, style=filled, fillcolor = Beige, label = '@@17']
tab18 [shape=circle, label = '@@18']
tab19 [shape=folder, color=darkgreen, label = '@@19']
tab20 [shape=folder, style=filled, fillcolor = Beige, label = '@@20']
tab21 [shape=folder, color=darkgreen, label = '@@21']
tab22 [shape=folder, color=darkgreen, label = '@@22']
# set up node layout
tab1 -> tab2 [label = ' V2']
tab1 -> tab3
tab3 -> tab11 [label = ' sg']
tab3 -> tab15 [label = ' V1']
tab2 -> tab4
tab4 -> tab5 [label = ' move_files()']
tab5 -> tab6
tab5 -> tab7
tab4 -> tab8 [label=' V1 files can end up here']
tab4 -> tab9 [label = ' sensor station not found']
tab6 -> tab10 [style = dashed]
tab11 -> tab12 [style = dashed]
tab12 -> tab13 [style = dashed]
tab11 -> tab14
tab15 -> tab16 [label = ' move_new_data()']
tab16 -> tab17 [label = ' sensor station not found']
tab16 -> tab18 [style = dashed]
tab18 -> tab19 [style = dashed]
tab16 -> tab19 [label = ' gps', style = dashed]
tab16 -> tab19 [label = ' node', style = dashed]
tab16 -> tab20
tab6 -> tab21 [style = dashed, label = ' gps']
tab6 -> tab21 [style = dashed, label = ' node']
tab10 -> tab21 [style = dashed]
tab7 -> tab22 [style = dashed]
}
[1]: 'Motus'
[2]: 'ctt-motus.celltracktech.com'
[3]: 'ctt-motus-development'
[4]: 'manual/name_match'
[5]: 'files/v2'
[6]: 'ctt'
[7]: 'sg'
[8]: 'unknown'
[9]: 'unknown-station'
[10]: 'data'
[11]: 'motus/data/sg'
[12]: 'pifile'
[13]: 'motus/dual-mode-ctt-filtered'
[14]: 'files/sensorgnome'
[15]: 'tag-data'
[16]: 'raw-data'
[17]: 'unknown'
[18]: 'data'
[19]: 'ctt/tag-data'
[20]: 'original-data'
[21]: 'files/v2/ctt'
[22]: 'files/v2/sg'
")
#V2
#get_to_key -> files/v2/ctt or sg
grViz(diagram = "digraph flowchart {
#cron.move_new_data()
tab1 [fontname = Arial, shape = box, style = rounded, color=darkgreen, label = '@@1']
tab3 [shape=box, color=darkgreen, label='@@3']
tab4 [shape=folder, color = red, label = '@@4']
tab5 [shape=folder, style=filled, fillcolor = Beige, label = '@@5']
tab6 [shape=folder, style=filled, fillcolor = Beige, label = '@@6']
tab7 [shape=folder, style=filled, fillcolor = Beige, label = '@@7']
tab8 [shape=folder, style=filled, fillcolor = Beige, label = '@@8']
tab9 [shape=folder, style=filled, fillcolor = Beige, label = '@@9']
tab10 [shape=circle, label = '@@10']
tab11 [shape=folder, color = darkgreen, label = '@@11']
tab12 [shape=circle, label = '@@12']
tab13 [shape=folder, color=darkgreen, label = '@@13']
tab14 [shape=folder, style=filled, fillcolor = Beige, label='@@14']
tab15 [shape=folder, color = darkgreen, label = '@@15']
tab16 [shape=folder, style=filled, fillcolor = Beige, label = '@@16']
tab17 [shape=folder, style=filled, fillcolor = Beige, label = '@@17']
tab18 [shape=circle, label = '@@18']
tab19 [shape=folder, color=darkgreen, label = '@@19']
tab20 [shape=folder, style=filled, fillcolor = Beige, label = '@@20']
tab21 [shape=folder, color=darkgreen, label = '@@21']
tab22 [shape=folder, color=darkgreen, label = '@@22']
# set up node layout
tab1 -> tab3
tab3 -> tab11 [label = ' sg']
tab3 -> tab15 [label = ' V1']
tab2 -> tab4
tab4 -> tab5 [label = ' move_files()']
tab5 -> tab6
tab5 -> tab7
tab4 -> tab8 [label=' V1 files can end up here']
tab4 -> tab9 [label = ' sensor station not found']
tab6 -> tab10 [style = dashed]
tab11 -> tab12 [style = dashed]
tab12 -> tab13 [style = dashed]
tab11 -> tab14
tab15 -> tab16 [label = ' move_new_data()']
tab16 -> tab17 [label = ' sensor station not found']
tab16 -> tab18 [style = dashed]
tab18 -> tab19 [style = dashed]
tab16 -> tab19 [label = ' gps', style = dashed]
tab16 -> tab19 [label = ' node', style = dashed]
tab16 -> tab20
tab6 -> tab21 [style = dashed, label = ' gps']
tab6 -> tab21 [style = dashed, label = ' node']
tab10 -> tab21 [style = dashed]
tab7 -> tab22 [style = dashed]
}
[1]: 'Motus'
[3]: 'ctt-motus-development'
[4]: 'manual/name_match'
[5]: 'files/v2'
[6]: 'ctt'
[7]: 'sg'
[8]: 'unknown'
[9]: 'unknown-station'
[10]: 'data'
[11]: 'motus/data/sg'
[12]: 'pifile'
[13]: 'motus/dual-mode-ctt-filtered'
[14]: 'files/sensorgnome'
[15]: 'tag-data'
[16]: 'raw-data'
[17]: 'unknown'
[18]: 'data'
[19]: 'ctt/tag-data'
[20]: 'original-data'
[21]: 'files/v2/ctt'
[22]: 'files/v2/sg'
")
#V2
#get_to_key -> files/v2/ctt or sg
grViz(diagram = "digraph flowchart {
#cron.move_new_data()
tab1 [fontname = Arial, shape = box, style = rounded, color=darkgreen, label = '@@1']
tab2 [shape=box, color=darkgreen, label='@@2']
tab3 [shape=folder, color = red, label = '@@3']
tab4 [shape=folder, style=filled, fillcolor = Beige, label = '@@4']
tab5 [shape=folder, style=filled, fillcolor = Beige, label = '@@5']
tab6 [shape=folder, style=filled, fillcolor = Beige, label = '@@6']
tab7 [shape=folder, style=filled, fillcolor = Beige, label = '@@7']
tab8 [shape=folder, style=filled, fillcolor = Beige, label = '@@8']
tab9 [shape=circle, label = '@@9']
tab10 [shape=folder, color = darkgreen, label = '@@10']
tab11 [shape=circle, label = '@@11']
tab12 [shape=folder, color=darkgreen, label = '@@12']
tab13 [shape=folder, style=filled, fillcolor = Beige, label='@@13']
tab14 [shape=folder, color = darkgreen, label = '@@14']
tab15 [shape=folder, style=filled, fillcolor = Beige, label = '@@15']
tab16 [shape=folder, style=filled, fillcolor = Beige, label = '@@16']
tab17 [shape=circle, label = '@@17']
tab18 [shape=folder, color=darkgreen, label = '@@18']
tab19 [shape=folder, style=filled, fillcolor = Beige, label = '@@19']
tab20 [shape=folder, color=darkgreen, label = '@@20']
tab21 [shape=folder, color=darkgreen, label = '@@21']
# set up node layout
tab1 -> tab2
tab2 -> tab3
tab2 -> tab10 [label = ' sg']
tab2 -> tab14 [label = ' V1']
tab3 -> tab4 [label = ' move_files()']
tab4 -> tab5
tab4 -> tab6
tab3 -> tab7 [label=' V1 files can end up here']
tab3 -> tab8 [label = ' sensor station not found']
tab5 -> tab9 [style = dashed]
tab10 -> tab11 [style = dashed]
tab11 -> tab12 [style = dashed]
tab10 -> tab13
tab14 -> tab15 [label = ' move_new_data()']
tab15 -> tab16 [label = ' sensor station not found']
tab15 -> tab17 [style = dashed]
tab17 -> tab18 [style = dashed]
tab15 -> tab18 [label = ' gps', style = dashed]
tab15 -> tab18 [label = ' node', style = dashed]
tab15 -> tab19
tab5 -> tab20 [style = dashed, label = ' gps']
tab5 -> tab20 [style = dashed, label = ' node']
tab9 -> tab20 [style = dashed]
tab6 -> tab21 [style = dashed]
}
[1]: 'Motus'
[2]: 'ctt-motus-development'
[3]: 'motus/data'
[4]: 'files/v2'
[5]: 'ctt'
[6]: 'sg'
[7]: 'unknown'
[8]: 'unknown-station'
[9]: 'data'
[10]: 'motus/data/sg'
[11]: 'pifile'
[12]: 'motus/dual-mode-ctt-filtered'
[13]: 'files/sensorgnome'
[14]: 'tag-data'
[15]: 'raw-data'
[16]: 'unknown'
[17]: 'data'
[18]: 'ctt/tag-data'
[19]: 'original-data'
[20]: 'files/v2/ctt'
[21]: 'files/v2/sg'
")
devtools::update_packages("celltracktech")
library(celltracktech)
update.packages()
library(celltracktech)
update.packages()
library(celltracktech)
library(celltracktech)
devtools::update_packages("celltracktech")
devtools::update_packages("celltracktech")
library(celltracktech)
install.packages("vctrs")
install.packages("vctrs")
devtools::update_packages("celltracktech")
library(celltracktech)
?cleanup_db
??cleanup_db
?celltracktech::cleanup_db
?celltracktech::db_cleanup
library(DBI)
library(RPostgres)
db_name <- "mousebird"
conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
db_cleanup <- function(conn) {
DBI::dbExecute(conn, "WITH ordered AS (
SELECT id, time, tag_id, node_id, tag_rssi,
rank() OVER (PARTITION BY time, tag_id, node_id, tag_rssi  ORDER BY id) AS rnk
FROM raw where node_id is not null
),
to_delete AS (
SELECT *
FROM   ordered
WHERE  rnk > 1
)
delete from raw using to_delete where raw.id = to_delete.id")
#DBI::dbExecute(conn, "WITH ordered AS (
#  SELECT id, time, tag_id, node_id, tag_rssi,
#    rank() OVER (PARTITION BY time, tag_id, node_id  ORDER BY id) AS rnk
#  FROM raw where node_id is not null
#),
#to_delete AS (
#  SELECT *
#  FROM   ordered
#  WHERE  rnk > 1
#)
#delete from raw using to_delete where raw.time = to_delete.time and raw.node_id = to_delete.node_id and raw.tag_id =to_delete.tag_id") #2022-04-04 19:43:43-04 1933552D 377c59
}
start <- Sys.time()
db_cleanup(conn)
time_elapse <- Sys.time() - start
print(time_elapse)
start <- Sys.time()
db_cleanup(conn)
time_elapse <- Sys.time() - start
print(time_elapse)
setwd("~/Documents/celltracktech")
devtools::document()
rm(list = c("db_cleanup"))
devtools::document()
devtools::update_packages("celltracktech")
library(celltracktech)
conn
start <- Sys.time()
db_cleanup(conn)
time_elapse <- Sys.time() - start
print(time_elapse)
?db_cleanup()
import_node_data(d, outpath, myproject) {
import_node_data <- function(d, outpath, myproject) {
myfiles <- list.files(file.path(outpath, myproject, "nodes"), recursive = TRUE)
files_loc <- sapply(strsplit(myfiles, "/"), tail, n=2)
print(files_loc)
}
myfiles <- list.files("/home/jess/Documents/data/test/node/node_data_3299A3_2020-07-30", recursive=TRUE)
myfiles
myfiles <- list.files("/home/jess/Documents/data/test/node/node_data_3299A3_2020-07-30", recursive=TRUE, full.names = TRUE)
myfiles
files_loc <- sapply(strsplit(myfiles, "/"), tail, n=2)
files_loc
paste(files_loc[1,], files_loc[2,])
paste(files_loc[1,], files_loc[2,], sep="/")
myfiles[1]
e <- myfiles[1]
tail(unlist(strsplit(e, "/")), n=2)
paste(tail(unlist(strsplit(e, "/")), n=2), sep="/")
paste(tail(unlist(strsplit(e, "/")), n=2), sep="/")
str(tail(unlist(strsplit(e, "/")), n=2))
unlist(strsplit(e, "/"))
tail(unlist(strsplit(e, "/")))
tail(unlist(strsplit(e, "/")), n=2)
tail(unlist(strsplit(e, "/")), n=2)[2]
qw<- tail(unlist(strsplit(e, "/")), n=2)
qw
qw[1]
qw[2]
paste(qw, collapse="/")
