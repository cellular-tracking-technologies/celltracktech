#get_to_key -> files/v2/ctt or sg
grViz(diagram = "digraph flowchart {
#cron.move_new_data()
tab1 [fontname = Arial, shape = box, style = rounded, color=darkgreen, label = '@@1']
tab2 [shape=box, color=darkgreen, label='@@2']
tab3 [shape=folder, color = red, label = '@@3']
tab4 [shape=folder, style=filled, fillcolor = Beige, label = '@@4']
tab5 [shape=folder, style=filled, fillcolor = Beige, label = '@@5']
tab6 [shape=folder, style=filled, fillcolor = Beige, label = '@@6']
tab7 [shape=folder, style=filled, fillcolor = Beige, label = '@@7']
tab8 [shape=folder, style=filled, fillcolor = Beige, label = '@@8']
tab9 [shape=circle, label = '@@9']
tab10 [shape=folder, color = darkgreen, label = '@@10']
tab11 [shape=circle, label = '@@11']
tab12 [shape=folder, color=darkgreen, label = '@@12']
tab13 [shape=folder, style=filled, fillcolor = Beige, label='@@13']
tab14 [shape=folder, color = darkgreen, label = '@@14']
tab15 [shape=folder, style=filled, fillcolor = Beige, label = '@@15']
tab16 [shape=folder, style=filled, fillcolor = Beige, label = '@@16']
tab17 [shape=circle, label = '@@17']
tab18 [shape=folder, color=darkgreen, label = '@@18']
tab19 [shape=folder, style=filled, fillcolor = Beige, label = '@@19']
tab20 [shape=folder, color=darkgreen, label = '@@20']
tab21 [shape=folder, color=darkgreen, label = '@@21']
# set up node layout
tab1 -> tab2
tab2 -> tab3
tab2 -> tab10 [label = ' sg']
tab2 -> tab14 [label = ' V1']
tab3 -> tab4 [label = ' move_files()']
tab4 -> tab5
tab4 -> tab6
tab3 -> tab7 [label=' V1 files can end up here']
tab3 -> tab8 [label = ' sensor station not found']
tab5 -> tab9 [style = dashed]
tab10 -> tab11 [style = dashed]
tab11 -> tab12 [style = dashed]
tab10 -> tab13
tab14 -> tab15 [label = ' move_new_data()']
tab15 -> tab16 [label = ' sensor station not found']
tab15 -> tab17 [style = dashed]
tab17 -> tab18 [style = dashed]
tab15 -> tab18 [label = ' gps', style = dashed]
tab15 -> tab18 [label = ' node', style = dashed]
tab15 -> tab19
tab5 -> tab20 [style = dashed, label = ' gps']
tab5 -> tab20 [style = dashed, label = ' node']
tab9 -> tab20 [style = dashed]
tab6 -> tab21 [style = dashed]
}
[1]: 'Motus'
[2]: 'ctt-motus-development'
[3]: 'motus/data'
[4]: 'files/v2'
[5]: 'ctt'
[6]: 'sg'
[7]: 'unknown'
[8]: 'unknown-station'
[9]: 'data'
[10]: 'motus/data/sg'
[11]: 'pifile'
[12]: 'motus/dual-mode-ctt-filtered'
[13]: 'files/sensorgnome'
[14]: 'tag-data'
[15]: 'raw-data'
[16]: 'unknown'
[17]: 'data'
[18]: 'ctt/tag-data'
[19]: 'original-data'
[20]: 'files/v2/ctt'
[21]: 'files/v2/sg'
")
library(DBI)
library(RPostgres)
db_name = "meadows"
conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
dbGetQuery(conn, "select * from raw where "time" between '2020-11-09' and '2021-02-02'")
dbGetQuery(conn, "select * from raw where time between '2020-11-09' and '2021-02-02'")
tag <- 'ksdhfkdshflslsjdflkj'
tag[1:8]
tag[1:8,]
substr(tag, 1, 8)
nm <- dbGetQuery(conn, "select * from raw where time between '2020-11-09' and '2021-02-02'")
nm
nm$tag_id
substr(nm$tag_id, 1, 8)
getwd()
setwd("~/Documents/celltracktech")
devtools::document()
list.files("~/Documents")
devtools::document()
devtools::document()
?import_node_data
?import_node_data
devtools::document()
?import_node_data
?import_node_data
devtools::document()
?import_node_data
list.files("~/Documents", full.names=TRUE)
source("~/R/nate.R")
CONN
conn
import_node_data(conn, outpath, myproject="CSU-Pueblo")
source("~/Documents/celltracktech/R/newdb.R")
import_node_data(conn, outpath, myproject="CSU-Pueblo")
source("~/Documents/celltracktech/R/newdb.R")
import_node_data(conn, outpath, myproject="CSU-Pueblo")
source("~/Documents/celltracktech/R/newdb.R")
import_node_data(conn, outpath, myproject="CSU-Pueblo")
dbDisconnect(conn)
source("~/R/nate.R")
source("~/R/nate.R")
conn
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
source("~/R/nate.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
source("~/Documents/celltracktech/R/newdb.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
source("~/Documents/celltracktech/R/newdb.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
#setwd("~/Documents/R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
conn
outpath
myproject <- "Multi-trophic Prairie Study"
e <- "/home/jess/Documents/data/radio_projects/csu/Multi-trophic Prairie Study/nodes/33A63B/beep_0 (1).csv"
#e <- file.path(outpath, "nodes", e)
file <- tail(unlist(strsplit(e, "/")), n=2)
y <- paste(file, collapse="/")
sensor <- NA
i <- DBI::dbReadTable(conn, "ctt_project_station")
begin <- i$deploy_at[1]
if(!is.null(myproject)) {
myproj <- DBI::dbReadTable(conn, "ctt_project")
projid <- myproj$id[which(myproj$name == myproject)]
begin <- i$deploy_at[which(i$project_id == projid)][1]
}
if(length(begin) == 0) {begin <- as.POSIXct("2018-01-01")}
filetype <- "raw"
df <- tryCatch({
if (file.size(e) > 0) {
read.csv(e,as.is=TRUE, na.strings=c("NA", ""), colClasses=c("id"="character"), skipNul = TRUE)
}}, error = function(err) {
# error handler picks up where error was generated
print("ignoring file", e, "- no data")
return(NULL)
})
df
#if(!all((c("time", "id", "rssi") %in% colnames(df)))) {df <- NULL}
if(!is.null(df)) {
df$NodeId <- toupper(file[1])
time = "UTC"
df$Time <- as.POSIXct(df$time,format="%Y-%m-%dT%H:%M:%SZ",tz = time, optional=TRUE)
df$time <- NULL
#nodes <- nodes[nodes$Time > as.POSIXct("2020-08-20"),]
df <- df[order(df$Time),]
df$RadioId <- 4 #https://bitbucket.org/cellulartrackingtechnologies/lifetag-system-report/src/master/beeps.py
df$TagId <- df$id
df$id <- NULL
df$TagRSSI <- as.integer(df$rssi)
df$rssi <- NULL
df$Validated <- 0
validated <- which(nchar(df$TagId) == 10)
df$Validated[validated] <- 1
df$TagId[validated] <- substr(df$TagId[validated], 1, 8)
z <- db_insert(df, filetype, conn, sensor, y, begin)}
df
contents <- df
filetype
sensor
y
begin
str(begin)
if("Time" %in% colnames(contents)) {
if(is.character(contents$Time)) { #does this just handle 1 broken date? if so, what happens when there are more broken rows?
DatePattern = '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?'
exactDatePattern = '^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?$'
brokenrow <- grep(exactDatePattern, contents$Time, invert=TRUE) #find row that has a date embedded in a messed up string (i.e. interrupted rows)
contents[brokenrow,1]<- substring(contents[brokenrow,1], regexpr(DatePattern, contents[brokenrow,1]))
contents$Time <- as.POSIXct(contents$Time)
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
} else {
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
}
#print(contents)
#contents <- contents[contents$Time < Sys.time() & contents$Time > begin,]
}
contents <- contents[!is.na(contents$Time),]
contents[,unname(which(sapply(contents, is.POSIXct)))] <- ifelse(nrow(contents[,unname(which(sapply(contents, is.POSIXct)))]) > 1,
tibble::as_tibble(apply(contents[,unname(which(sapply(contents, is.POSIXct)))], 2,
timeset)),
dplyr::bind_rows(apply(contents[,unname(which(sapply(contents, is.POSIXct)))], 2, timeset)))
contents <- data.frame(contents)
contents$station_id <- sensor
contents$path <- y
filetype == "raw"
if (!(any(tolower(names(contents))=="validated"))) {contents$validated <- NA}
contents$RadioId <- as.integer(contents$RadioId)
contents$TagRSSI <- as.integer(contents$TagRSSI)
names(contents) <- sapply(names(contents), function(x) gsub('([[:lower:]])([[:upper:]])', '\\1_\\2', x))
names(contents) <- tolower(names(contents))
is.na(sensor)
mmy <- paste0("select * from raw where time between '", min(contents$Time),"' and '", max(contents$Time), "'")
min(contents$time)
min(contents$Time)
str(contents)
source("~/Documents/celltracktech/R/newdb.R")
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
contents
#e <- file.path(outpath, "nodes", e)
file <- tail(unlist(strsplit(e, "/")), n=2)
y <- paste(file, collapse="/")
sensor <- NA
i <- DBI::dbReadTable(conn, "ctt_project_station")
begin <- min(i$deploy_at)
if(!is.null(myproject)) {
myproj <- DBI::dbReadTable(conn, "ctt_project")
projid <- myproj$id[which(myproj$name == myproject)]
begin <- min(i$deploy_at[which(i$project_id == projid)])
}
if(length(begin) == 0) {begin <- as.POSIXct("2018-01-01")}
filetype <- "raw"
df <- tryCatch({
if (file.size(e) > 0) {
read.csv(e,as.is=TRUE, na.strings=c("NA", ""), colClasses=c("id"="character"), skipNul = TRUE)
}}, error = function(err) {
# error handler picks up where error was generated
print("ignoring file", e, "- no data")
return(NULL)
})
#if(!all((c("time", "id", "rssi") %in% colnames(df)))) {df <- NULL}
if(!is.null(df)) {
df$NodeId <- toupper(file[1])
time = "UTC"
df$Time <- as.POSIXct(df$time,format="%Y-%m-%dT%H:%M:%SZ",tz = time, optional=TRUE)
df$time <- NULL
#nodes <- nodes[nodes$Time > as.POSIXct("2020-08-20"),]
df <- df[order(df$Time),]
df$RadioId <- 4 #https://bitbucket.org/cellulartrackingtechnologies/lifetag-system-report/src/master/beeps.py
df$TagId <- df$id
df$id <- NULL
df$TagRSSI <- as.integer(df$rssi)
df$rssi <- NULL
df$Validated <- 0
validated <- which(nchar(df$TagId) == 10)
df$Validated[validated] <- 1
df$TagId[validated] <- substr(df$TagId[validated], 1, 8)
z <- db_insert(df, filetype, conn, sensor, y, begin)}
df
filetype
conn
sensor
y
begin
contents <- df
if("Time" %in% colnames(contents)) {
if(is.character(contents$Time)) { #does this just handle 1 broken date? if so, what happens when there are more broken rows?
DatePattern = '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?'
exactDatePattern = '^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?$'
brokenrow <- grep(exactDatePattern, contents$Time, invert=TRUE) #find row that has a date embedded in a messed up string (i.e. interrupted rows)
contents[brokenrow,1]<- substring(contents[brokenrow,1], regexpr(DatePattern, contents[brokenrow,1]))
contents$Time <- as.POSIXct(contents$Time)
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
} else {
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
}
#print(contents)
#contents <- contents[contents$Time < Sys.time() & contents$Time > begin,]
}
contents
contents[!is.na(contents$Time),]
contents <- contents[!is.na(contents$Time),]
contents
str(contents)
contents[,unname(which(sapply(contents, is.POSIXct)))] <- ifelse(nrow(contents[,unname(which(sapply(contents, is.POSIXct)))]) > 1,
tibble::as_tibble(apply(contents[,unname(which(sapply(contents, is.POSIXct)))], 2,
timeset)),
dplyr::bind_rows(apply(contents[,unname(which(sapply(contents, is.POSIXct)))], 2, timeset)))
contents
contents <- df
contents$Time[1]
if("Time" %in% colnames(contents)) {
if(is.character(contents$Time)) { #does this just handle 1 broken date? if so, what happens when there are more broken rows?
DatePattern = '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?'
exactDatePattern = '^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[T, ][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}(.[[:digit:]]{3})?[Z]?$'
brokenrow <- grep(exactDatePattern, contents$Time, invert=TRUE) #find row that has a date embedded in a messed up string (i.e. interrupted rows)
contents[brokenrow,1]<- substring(contents[brokenrow,1], regexpr(DatePattern, contents[brokenrow,1]))
contents$Time <- as.POSIXct(contents$Time)
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
} else {
contents <- dplyr::filter(contents, Time < Sys.time() & Time > begin)
}
#print(contents)
#contents <- contents[contents$Time < Sys.time() & contents$Time > begin,]
}
contents <- contents[!is.na(contents$Time),]
contents$Time[1]
contents <- data.frame(contents)
contents
contents$Time[1]
str(contents$Time[1])
source("~/Documents/celltracktech/R/api_postgres.R")
import_node_data(conn, outpath, myproject="Multi-trophic Prairie Study")
devtools::update_packages("celltracktech")
devtools::document()
devtools::update_packages("celltracktech")
?node_file
source("~/Documents/R/caco.R")
datacross
source("~/Documents/R/caco.R")
datacross
library(celltracktech)
source("~/Documents/R/locate_example.R")
library(RPostgres)
library(DBI)
library(dplyr)
library(celltracktech)
db_name <- "meadows" #this is your project name on your CTT account
conn <- dbConnect(RPostgres::Postgres(), dbname=db_name)
flights_db <- tbl(conn, "node_health")
beep <- flights_db %>%
filter(time > '2022-12-13') %>%
collect()
beep
source("~/Documents/R/api_run_meadows.R")
source("~/Documents/R/locate_example.R")
plot(test)
plot(test[1])
plot(test[[1]])
test
source("~/Documents/R/locate_example.R")
plot(test)
test
source("~/Documents/R/caco.R")
datacross
source("~/Documents/R/api_run_meadows.R")
source("~/Documents/R/locate_example.R")
test
source("~/Documents/R/locate_example.R")
test
beep
node_file <- function(health) {
if (nrow(health) < 1) stop("no node health data!")
health$timediff <- as.integer(health$time - health$recorded_at)
#health <- health[health$timediff == 0,]
health <- aggregate(health[,c("latitude", "longitude")],list(health$node_id), median, na.rm=TRUE)
if (any(is.na(health))) {health <- health[-which(is.na(health$latitude) | is.na(health$latitude)),]}
#
colnames(health)[colnames(health)=="latitude"] <- "lat"
colnames(health)[colnames(health)=="longitude"] <- "lng"
colnames(health)[colnames(health)=="Group.1"] <- "NodeId"
return(health)}
test <- node_file(beep)
test
node_file <- function(health) {
if (nrow(health) < 1) stop("no node health data!")
health$timediff <- as.integer(health$time - health$recorded_at)
#health <- health[health$timediff == 0,]
health <- aggregate(health[,c("latitude", "longitude")],list(health$node_id), median, na.rm=TRUE)
if (any(is.na(health))) {health <- health[-which(is.na(health$latitude) | is.na(health$latitude)),]}
#
colnames(health)[colnames(health)=="latitude"] <- "lat"
colnames(health)[colnames(health)=="longitude"] <- "lng"
colnames(health)[colnames(health)=="Group.1"] <- "NodeId"
wells_sf <- st_as_sf(health, coords = c("lng","lat"))
return(wells_sf)}
test <- node_file(beep)
node_file <- function(health) {
if (nrow(health) < 1) stop("no node health data!")
health$timediff <- as.integer(health$time - health$recorded_at)
#health <- health[health$timediff == 0,]
health <- aggregate(health[,c("latitude", "longitude")],list(health$node_id), median, na.rm=TRUE)
if (any(is.na(health))) {health <- health[-which(is.na(health$latitude) | is.na(health$latitude)),]}
#
colnames(health)[colnames(health)=="latitude"] <- "lat"
colnames(health)[colnames(health)=="longitude"] <- "lng"
colnames(health)[colnames(health)=="Group.1"] <- "NodeId"
wells_sf <- sf::st_as_sf(health, coords = c("lng","lat"))
return(wells_sf)}
test <- node_file(beep)
plot(test[[1]])
plot(test)
plot(test, col=black)
plot(test, colot=black)
plot(test, col="black")
plot(test, col="black", label=test$NodeId)
text(test$lng, test$lat-1, labels=test$NodeId)
library(ggplot2)
ggplot(test) +
geom_sf() +
geom_sf_label(aes(label = NodeId))
ggplot() +
geom_sf(test) +
geom_sf_label(aes(label = NodeId))
ggplot() +
geom_sf(data=test) +
geom_sf_label(aes(label = NodeId))
ggplot(test) +
geom_sf(data=test) +
geom_sf_label(aes(label = NodeId))
ggplot(test) +
geom_sf(data=test) +
geom_sf_label_repel(aes(label = NodeId))
devtools::document
devtools::document()
devtools::update_packages(celltracktech)
devtools::update_packages("celltracktech")
library(celltracktech)
ggplot(test) +
geom_sf(data=test) +
geom_sf_label_repel(aes(label = NodeId))
source("~/Documents/R/locate_example.R")
ggplot(test) +
geom_sf(data=test) #+
library(sf)
st_write(test, "meadows_nodes.gpkg")
source("~/Documents/R/locate_example.R")
source("~/Documents/celltracktech/R/node.R")
test <- node_file(beep)
ggplot(test) +
geom_sf(data=test) #+
#geom_sf_label_repel(aes(label = NodeId))
st_write(test, "meadows_nodes.gpkg")
load("~/Downloads/ElephantSeal1.rda")
write.csv(ElephantSeal1, "~/Documents/elephantseal1.csv")
load("~/Downloads/ElephantSeal2.rda")
write.csv(ElephantSeal2, "~/Documents/elephantseal2.csv")
devtools::install_github("USCBiostats/jsPhyloSVG")
install.packages("ape")
library(ape)
library(jsPhyloSVG)
x <- rtree(10)
jsPhyloSVG(write.tree(x), width = 500)
?jsPhyloSVG
jsPhyloSVG(write.tree(x), width = 500, circular=FALSE)
?jsPhyloSVG
?jsPhyloSVGOutput
jsPhyloSVGOutput(write.tree(x), width = 500, circular=FALSE)
jsPhyloSVGOutput(write.tree(x), width = 500)
library(jsPhyloSVG)
?jsPhyloSVG
library(ape)
x <- rtree(10)
x
str(x)
?`ape-package`
data(bird.families)
str(bird.families)
jsPhyloSVG(bird.families)
jsPhyloSVGOutput(write.tree(bird.families), width = 500, circular=FALSE)
jsPhyloSVG(write.tree(bird.families), width = 500)
jsPhyloSVG(write.tree(bird.families), width = 500, circular=FALSE)
jsPhyloSVG(write.tree(bird.families), circular=FALSE)
?jsPhyloSVGOutput
devtools::install_github("USCBiostats/rphyloxml")
library(rphyloxml)
read_phyloxml("https://glottolog.org/resource/languoid/id/ndon1253.phylo.xml")
test <- read_phyloxml("https://glottolog.org/resource/languoid/id/ndon1253.phylo.xml")
str(test)
jsPhyloSVG(write.tree(test), circular=FALSE)
jsPhyloSVG(write.tree(unlist(test)), circular=FALSE)
apetree <- phyloxml2phylo(test)[[1]]
apetree
plot(apetree)
jsPhyloSVG(write.tree(apetree), circular=FALSE)
jsPhyloSVG(write.tree(apetree), width=500)
jsPhyloSVG(write.tree(apetree),)
jsPhyloSVG(write.tree(apetree))
fn <- system.file("https://glottolog.org/resource/languoid/id/ndon1253.phylo.xml", package="rphyloxml")
fn
(apetree <- phyloxml2phylo(test))[[1]]
jsPhyloSVG(write.tree(apetree))
plot(apetree)
fn <- system.file("~/Downloads/download.xml", package="rphyloxml")
fn
fn <- system.file("/home/jess/Downloads/download.xml", package="rphyloxml")
fn
install.packages("treeio")
library(treeio)
install.packages("ggtree")
setwd("~/Documents")
